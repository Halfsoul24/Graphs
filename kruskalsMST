// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

struct edge{
    int src;
    int dest;
    int wt;
};

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.4
	int Get(vector<int>&par,int x)
	{
	    return par[x]=(par[x]==x)?x:Get(par,par[x]);
	}
	
	void Union(vector<int>&par,vector<int>&rank,int x,int y)
	{
	    x=Get(par,x);
	    y=Get(par,y);
	    
	    if(rank[x]==rank[y])rank[x]++;
	    
	    if(rank[x]>rank[y])
	    par[y]=x;
	    
	    else
	    par[x]=y;
	}
	
	static bool comp(edge &e1,edge &e2)
	{
	    return e1.wt<e2.wt;
	}
	
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<edge>arr;
        int k=0;
        for(int i=0;i<V;i++)
        {
            for(int j=0;j<adj[i].size();j++)
            {
                edge temp;
                temp.src=i;
                temp.dest=adj[i][j][0];
                temp.wt=adj[i][j][1];
                arr.push_back(temp);
            }
        }
        vector<int>par(V),rank(V,0);
        
        for(int i=0;i<V;i++)
            par[i]=i;
            
        sort(arr.begin(),arr.end(),comp);
        //for(int i=0;i<arr.size();i++)cout<<arr[i].src<<" "<<arr[i].dest<<" "<<arr[i].wt<<endl;
        int cnt=0;
        int i=0,res=0;
        
        while(cnt<V-1)
        {
            int x=Get(par,arr[i].src);
            int y=Get(par,arr[i].dest);
            if(x!=y)
            {
                Union(par,rank,x,y);
                res+=arr[i].wt;
                cnt++;
            }
            i++;
        }
        return res;
    }
};


// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends
